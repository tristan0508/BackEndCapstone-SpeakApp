[{"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\index.js":"1","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\App.js":"2","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\reportWebVitals.js":"3","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\dashboard\\Dashboard.js":"4","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\header\\Header.js":"5","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\messagearea\\MessageLayout.js":"6","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\messagearea\\MessageHeader.js":"7","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\messagearea\\MessageArea.js":"8","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\customtheme\\MaterialTheme.js":"9","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\providers\\UserProvider.js":"10","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\api\\agent.js":"11","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\LoginPage.js":"12","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\RegisterPage.js":"13","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\chatsidebar\\ChatSideBar.js":"14","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\providers\\ChatHubProvider.js":"15","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\providers\\ChatProvider.js":"16","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\chatsidebar\\ChatDirectMessage.js":"17","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\chatsidebar\\UserList.js":"18","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\customcomponents\\AvatarStatus.js":"19","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\customcomponents\\GroupMessageByDate.js":"20","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\providers\\ContextProvider.js":"21","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\utilis\\utils.js":"22","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\chatsidebar\\ChannelMessage.js":"23","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\customcomponents\\EditMessage.js":"24","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\customcomponents\\SnackBar.js":"25","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\chatsidebar\\GroupList.js":"26"},{"size":1236,"mtime":1612638716121,"results":"27","hashOfConfig":"28"},{"size":1253,"mtime":1612842931985,"results":"29","hashOfConfig":"28"},{"size":366,"mtime":1610598699027,"results":"30","hashOfConfig":"28"},{"size":2701,"mtime":1612990403908,"results":"31","hashOfConfig":"28"},{"size":2762,"mtime":1612638716117,"results":"32","hashOfConfig":"28"},{"size":5136,"mtime":1613024829293,"results":"33","hashOfConfig":"28"},{"size":3469,"mtime":1612638716118,"results":"34","hashOfConfig":"28"},{"size":2709,"mtime":1613021158600,"results":"35","hashOfConfig":"28"},{"size":1212,"mtime":1611115818707,"results":"36","hashOfConfig":"28"},{"size":3483,"mtime":1613021020708,"results":"37","hashOfConfig":"28"},{"size":1054,"mtime":1611729122208,"results":"38","hashOfConfig":"28"},{"size":5419,"mtime":1612638716110,"results":"39","hashOfConfig":"28"},{"size":8409,"mtime":1612638716111,"results":"40","hashOfConfig":"28"},{"size":4717,"mtime":1613021296506,"results":"41","hashOfConfig":"28"},{"size":3637,"mtime":1613024894164,"results":"42","hashOfConfig":"28"},{"size":3614,"mtime":1613021113977,"results":"43","hashOfConfig":"28"},{"size":3082,"mtime":1613021269635,"results":"44","hashOfConfig":"28"},{"size":2105,"mtime":1612989072361,"results":"45","hashOfConfig":"28"},{"size":1609,"mtime":1612638716115,"results":"46","hashOfConfig":"28"},{"size":605,"mtime":1613021923730,"results":"47","hashOfConfig":"28"},{"size":182,"mtime":1612638716122,"results":"48","hashOfConfig":"28"},{"size":141,"mtime":1612638716123,"results":"49","hashOfConfig":"28"},{"size":3567,"mtime":1612888502536,"results":"50","hashOfConfig":"28"},{"size":2208,"mtime":1613020666962,"results":"51","hashOfConfig":"28"},{"size":1126,"mtime":1612888502540,"results":"52","hashOfConfig":"28"},{"size":4018,"mtime":1613021526498,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"753db5",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"56"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"56"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"56"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\index.js",[],["114","115"],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\App.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\dashboard\\Dashboard.js",["116"],"import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport MessageArea from '../messagearea/MessageArea';\r\nimport MessageHeader from '../messagearea/MessageHeader';\r\nimport MessageLayout from '../messagearea/MessageLayout';\r\nimport ChatSideBar from '../chatsidebar/ChatSideBar';\r\nimport { ChatDirectMessage } from '../chatsidebar/ChatDirectMessage';\r\nimport { ChatContext, ChatHubContext } from '../../providers/ContextProvider';\r\nimport { ChannelMessage } from '../chatsidebar/ChannelMessage';\r\nimport { GroupList } from '../chatsidebar/GroupList';\r\n\r\nconst Dashboard = () => {\r\n    const [openMenu, setOpenMenu] = useState(false)\r\n    const { HubConnection } = useContext(ChatHubContext);\r\n    const { GetUserChat, GetGroups } = useContext(ChatContext)\r\n\r\n    const scrollToEnd = () => {\r\n        let chatElement = document.getElementById('chat');\r\n        if (!chatElement) {\r\n            return 0;\r\n        }\r\n        chatElement.scrollTop = chatElement.scrollHeight;\r\n    }\r\n\r\n    useEffect(() => {\r\n        scrollToEnd()\r\n        HubConnection()\r\n        GetUserChat()\r\n        GetGroups()\r\n    }, [])\r\n\r\n \r\n\r\n    const chatContainer = useRef();\r\n    const sideContainer = useRef();\r\n\r\n    return (\r\n        <Grid container >\r\n            <Grid container item xs={1} >\r\n                \r\n            </Grid>\r\n            <Grid container item xs={3} justify=\"flex-end\">\r\n                <ChatSideBar />\r\n            </Grid>\r\n\r\n            <Grid id=\"chat-container\" className=\"chat-grid-item\" container item xs={openMenu ? 6 : 8}>\r\n                <MessageHeader \r\n                openMenu={openMenu}\r\n                setOpenMenu={setOpenMenu}\r\n                chatContainer={chatContainer}\r\n                sideContainer={sideContainer} />\r\n\r\n                <Grid id=\"chat-grid-container\" ref={chatContainer} container item className=\"chat-grid-container\" alignItems=\"flex-start\" >\r\n                    <Grid id=\"chat\" className=\"messages\" container item xs={8}>\r\n                        <ChannelMessage />\r\n                        <ChatDirectMessage />\r\n                        <GroupList />\r\n                        <MessageLayout />\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid container item className=\"messageContainer\">\r\n                    <Grid item className=\"message-area-item\">\r\n                        <MessageArea />\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            \r\n            <Grid id=\"side-container\" ref={sideContainer} container item className=\"maybe\" xs={2}>\r\n\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Dashboard;","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\header\\Header.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\messagearea\\MessageLayout.js",["117"],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\messagearea\\MessageHeader.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\messagearea\\MessageArea.js",["118"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport {\r\n    makeStyles,\r\n    TextField,\r\n    createStyles,\r\n    AppBar,\r\n    Toolbar,\r\n    IconButton,\r\n    ThemeProvider\r\n} from '@material-ui/core';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport AttachFileIcon from '@material-ui/icons/AttachFile';\r\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon'\r\nimport { headerTheme } from '../../customtheme/MaterialTheme';\r\nimport { ChatContext, ChatHubContext } from '../../providers/ContextProvider';\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        grow: {\r\n            flexGrow: 1,\r\n        },\r\n    }),\r\n);\r\n\r\nconst MessageArea = () => {\r\n    const classes = useStyles();\r\n    const [input, setInput] = useState(\"\")\r\n    const { addMessage, currentChatParam } = useContext(ChatHubContext);\r\n    const { GetMessages } = useContext(ChatHubContext)\r\n  \r\n\r\n    useEffect(() => {\r\n\r\n    }, [GetMessages, currentChatParam, addMessage])\r\n \r\n\r\n    return (\r\n        <ThemeProvider theme={headerTheme}>\r\n\r\n            <AppBar position=\"relative\" >\r\n                <TextField\r\n                    className=\"textarea\"\r\n                    multiline variant=\"outlined\"\r\n                    id=\"outline-flexible\"\r\n                    aria-label=\"empty textarea\"\r\n                    placeholder=\"Message\"\r\n                    onChange={(e) => {\r\n                        if (e.nativeEvent.inputType !== 'insertLineBreak'){\r\n                            setInput(e.currentTarget.value)\r\n                        }\r\n                    }}\r\n                    onKeyUp={(e) => {\r\n                        if (e.key === 'Enter' && input.length !== 1){\r\n                            addMessage(input)\r\n                            GetMessages(currentChatParam)\r\n                            setInput(\"\")\r\n                        }\r\n                    }}\r\n                    value={input}\r\n                />\r\n                <Toolbar style={{\r\n                    backgroundColor: '#1dcaff',\r\n                    borderTop: '1px solid white'\r\n                }}>\r\n                    < div className={classes.grow} />\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"open drawer\">\r\n                        <InsertEmoticonIcon />\r\n                    </IconButton>\r\n                    <IconButton color=\"inherit\">\r\n                        <AttachFileIcon />\r\n                    </IconButton>\r\n                    <IconButton edge=\"end\" color=\"inherit\">\r\n                        <SendIcon />\r\n                    </IconButton>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n        </ThemeProvider>\r\n    )\r\n}\r\n\r\nexport default MessageArea;","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\customtheme\\MaterialTheme.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\providers\\UserProvider.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\api\\agent.js",["119"],"import axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'http://localhost:5000/api';\r\n\r\nconst responseBody = (response) => response.data;\r\n\r\nconst requests = {\r\n    get: (url) => axios.get(url).then(responseBody),\r\n    post: (url, body) => axios.get(url, body).then(responseBody),\r\n    put: (url, body) => axios.get(url, body).then(responseBody),\r\n    del: (url) => axios.get(url).then(responseBody),\r\n    getAuth: (url, firebaseUserId, token) => axios.get(url, firebaseUserId, token)\r\n    .then(responseBody)\r\n};\r\n\r\nconst Messages = {\r\n    list: (userId) => requests.get(`/messages/${userId}`)\r\n}\r\n\r\nconst User = {\r\n    user: (firebaseUserId, token) => requests.get(`/user/${firebaseUserId}`, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    })\r\n}\r\n\r\nconst UserChat = {\r\n    userChat: (token) => requests.get('/chat/', {\r\n         headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n    })\r\n}\r\nexport default {\r\n    Messages,\r\n    User,\r\n    UserChat\r\n}",["120","121"],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\LoginPage.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\RegisterPage.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\chatsidebar\\ChatSideBar.js",["122"],"import React, { useContext } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { Button, Container, ThemeProvider } from '@material-ui/core';\r\nimport { headerTheme } from '../../customtheme/MaterialTheme';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport AvatarStatus from '../customcomponents/AvatarStatus';\r\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { UserContext, ChatHubContext, ChatContext } from '../../providers/ContextProvider';\r\nimport { SnackBar } from '../customcomponents/SnackBar';\r\n\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    width: '100%',\r\n    height: '100%',\r\n    maxWidth: 360,\r\n    backgroundColor: '#192734',\r\n    color: 'white',\r\n    border: '1px solid white',\r\n    overflow: 'scroll',\r\n  },\r\n}));\r\n\r\nconst ChatSideBar = () => {\r\n    const classes = useStyles();\r\n    const { chatList,\r\n            openModal,\r\n            setOpenModal,\r\n            openChannelModal,\r\n            setOpenChannelModal,\r\n            openGroupModal,\r\n            setOpenGroupModal } = useContext(ChatContext);\r\n    const { setCurrentChatParam, GetMessages } = useContext(ChatHubContext);\r\n    const { displayName } = useContext(UserContext);\r\n    const history = useHistory();\r\n\r\n\r\n    const handleChannelModal = (e) => {\r\n      if(openChannelModal === false){\r\n        setOpenChannelModal(true)\r\n      } else {\r\n        setOpenChannelModal(false)\r\n      }\r\n    }\r\n\r\n    const handleGroupModal = () => {\r\n      if(openGroupModal === false){\r\n        setOpenGroupModal(true)\r\n      } else {\r\n        setOpenGroupModal(false)\r\n      }\r\n    }\r\n\r\n\r\n    const handleDirectModal = (e) => {\r\n      if(openModal === false){\r\n        setOpenModal(true)\r\n      } else {\r\n        setOpenModal(false)\r\n      }\r\n    }\r\n\r\n    const handleChatRoute = (id) => {\r\n      setCurrentChatParam(id)\r\n      GetMessages(id)\r\n      history.push(`/dashboard/chat/${id}`)\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n        <ThemeProvider theme={headerTheme}>\r\n          <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n            <Container>\r\n                <h4 onClick={handleGroupModal} style={{ cursor: \"pointer\"}}>Channels <SearchIcon /></h4>\r\n                <Button variant=\"outlined\" color=\"secondary\" onClick={() => {\r\n                  handleChannelModal()\r\n                }}>\r\n                Add Channel\r\n                </Button>\r\n            </Container>\r\n            <Container>\r\n                { chatList !== null ? chatList.map(c => {\r\n                        if(c.type === 'Channel'){\r\n                        return  <ListItem button key={c.id} onClick={() => handleChatRoute(c.id)}>\r\n                                    <PeopleAltIcon />\r\n                                    <ListItemText className=\"chatListText\" key={c.id} primary={c.name} />\r\n                                </ListItem>\r\n                        }\r\n                    })\r\n                : null}\r\n            </Container>\r\n          </List>\r\n          <Divider />\r\n          <List component=\"nav\" aria-label=\"secondary mailbox folders\">\r\n            <Container>\r\n                <h4>Direct Messages</h4>\r\n               \r\n                <Button variant=\"outlined\" color=\"secondary\" onClick={() => {\r\n                  handleDirectModal()\r\n                }}>\r\n                New Direct Message\r\n                </Button>\r\n            </Container>\r\n            <Container>\r\n                { chatList !== null ? chatList.map(c => {\r\n                        if(c.type === 'Direct Message'){\r\n\r\n                        return  <ListItem button key={c.id} onClick={() => handleChatRoute(c.id)}>\r\n                                    <AvatarStatus src={c.sender === displayName ? c.receiverImage : c.senderImage}\r\n                                    alt=\"avatar\"/>\r\n                                    <ListItemText \r\n                                      className=\"chatListText\"\r\n                                      key={c.id}\r\n                                      primary={c.sender === displayName ? c.receiver : c.sender}\r\n                                       />\r\n                                </ListItem>\r\n                        }\r\n                        return null;\r\n                    })\r\n                : null}\r\n                <SnackBar />\r\n            </Container>\r\n          </List>\r\n        </ThemeProvider>\r\n        </div>\r\n      );\r\n}\r\nexport default ChatSideBar;","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\providers\\ChatHubProvider.js",["123"],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\providers\\ChatProvider.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\chatsidebar\\ChatDirectMessage.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\chatsidebar\\UserList.js",["124"],"import React, { useEffect, useContext } from 'react';\r\nimport { Container, ListItem } from '@material-ui/core';\r\nimport AvatarStatus from '../customcomponents/AvatarStatus';\r\nimport { UserContext, ChatContext, ChatHubContext } from '../../providers/ContextProvider';\r\n\r\n\r\n\r\n\r\nexport const UserList = ({filteredUsers}) => {\r\n    const { GetAllUsers, userOnline, setOpenModal, GetUserChat } = useContext(ChatContext)\r\n    const { displayName, userImage } = useContext(UserContext);\r\n    const { AddChat } = useContext(ChatHubContext)\r\n\r\n    useEffect(() => {\r\n        GetAllUsers()\r\n    }, [])\r\n\r\n    const handleReceiver = (first, last, image, email) => {\r\n        const Chat = {\r\n            type: \"Direct Message\",\r\n            sender: displayName,\r\n            receiver: `${first} ${last}`,\r\n            senderImage: userImage,\r\n            receiverImage: image ? image : null,\r\n            receiverEmail: email\r\n        }\r\n\r\n        AddChat(Chat)\r\n        .then(() => GetUserChat())\r\n        setOpenModal(false)\r\n    }\r\n\r\n    return (\r\n\r\n        <ListItem className=\"userListContainer\" style={{ marginTop: '5px',borderRadius: '5px'}}>\r\n           { filteredUsers.map(u => {\r\n                return <div key={u.id} className=\"userList\">\r\n                        <AvatarStatus src={u.image} online={userOnline} />\r\n                            <Container style={{ marginTop: '7px', paddingLeft: '10px'}} >\r\n                                <button \r\n                                 onClick={() => \r\n                                    handleReceiver(\r\n                                        u.firstName,\r\n                                        u.lastName,\r\n                                        u.image,\r\n                                        u.email\r\n                                    )} \r\n                                 className=\"userListBtn\">\r\n                                    {u.firstName} {u.lastName} # {u.displayName}\r\n                                </button>\r\n                            </Container>\r\n                        </div>\r\n\r\n            })}\r\n        </ListItem>\r\n    )\r\n}","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\customcomponents\\AvatarStatus.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\customcomponents\\GroupMessageByDate.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\providers\\ContextProvider.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\utilis\\utils.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\chatsidebar\\ChannelMessage.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\customcomponents\\EditMessage.js",["125"],"import React, { useContext, useState } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Button } from '@material-ui/core';\r\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\r\nimport { ChatContext, ChatHubContext } from '../../providers/ContextProvider';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n    createStyles({\r\n        root: {\r\n            backgroundColor: 'transparent',\r\n            color: 'white',\r\n        },\r\n        inline: {\r\n            display: 'inline',\r\n            color: 'white',\r\n            flexWrap: 'wrap'\r\n        },\r\n        editField: {\r\n            color: 'white !important',\r\n            width: '100%',\r\n        },\r\n        inputLabel: {\r\n            color: 'white',\r\n        },\r\n        notchedOutline: {\r\n          borderWidth: \"1px\",\r\n          borderColor: \"white !important\"\r\n        },\r\n        submit: {\r\n            margin: theme.spacing(3, 0, 2),\r\n        },\r\n    }),\r\n);\r\n\r\n\r\nexport const EditMessage = ({msg, msgId, chatId, setEditMsg}) => {\r\n    const classes = useStyles();\r\n    const [message, setMessage] = useState(msg);\r\n    const { Update } = useContext(ChatHubContext);\r\n\r\n    \r\n    \r\n    return (\r\n        <div>\r\n            <TextField\r\n                InputLabelProps={{\r\n                classes: {\r\n                root: classes.inputLabel\r\n                },\r\n                }}\r\n                color=\"secondary\"\r\n                className={classes.editField}\r\n                label=\"Edit\"\r\n                variant=\"filled\"\r\n                onChange={(e) => setMessage(e.currentTarget.value)}\r\n                value={message}/>\r\n                    <Button\r\n                        style={{ border: '1px solid white'}}\r\n                        id='addChannel'\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                        onClick={async() => {\r\n                           await Update(msgId, message, chatId)\r\n                            setEditMsg(\"\")\r\n                        }}\r\n                        >\r\n                        Save Changes\r\n                    </Button>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\customcomponents\\SnackBar.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\chatsidebar\\GroupList.js",[],{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","severity":1,"message":"131","line":30,"column":8,"nodeType":"132","endLine":30,"endColumn":10,"suggestions":"133"},{"ruleId":"134","severity":1,"message":"135","line":11,"column":10,"nodeType":"136","messageId":"137","endLine":11,"endColumn":21},{"ruleId":"134","severity":1,"message":"135","line":15,"column":10,"nodeType":"136","messageId":"137","endLine":15,"endColumn":21},{"ruleId":"138","severity":1,"message":"139","line":36,"column":1,"nodeType":"140","endLine":40,"endColumn":2},{"ruleId":"126","replacedBy":"141"},{"ruleId":"128","replacedBy":"142"},{"ruleId":"143","severity":1,"message":"144","line":88,"column":54,"nodeType":"145","messageId":"146","endLine":88,"endColumn":56},{"ruleId":"134","severity":1,"message":"135","line":3,"column":10,"nodeType":"136","messageId":"137","endLine":3,"endColumn":21},{"ruleId":"130","severity":1,"message":"147","line":16,"column":8,"nodeType":"132","endLine":16,"endColumn":10,"suggestions":"148"},{"ruleId":"134","severity":1,"message":"135","line":5,"column":10,"nodeType":"136","messageId":"137","endLine":5,"endColumn":21},"no-native-reassign",["149"],"no-negated-in-lhs",["150"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'GetGroups', 'GetUserChat', and 'HubConnection'. Either include them or remove the dependency array.","ArrayExpression",["151"],"no-unused-vars","'ChatContext' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["149"],["150"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has a missing dependency: 'GetAllUsers'. Either include it or remove the dependency array.",["152"],"no-global-assign","no-unsafe-negation",{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},"Update the dependencies array to be: [GetGroups, GetUserChat, HubConnection]",{"range":"157","text":"158"},"Update the dependencies array to be: [GetAllUsers]",{"range":"159","text":"160"},[1168,1170],"[GetGroups, GetUserChat, HubConnection]",[588,590],"[GetAllUsers]"]