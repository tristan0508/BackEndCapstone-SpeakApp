[{"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\index.js":"1","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\App.js":"2","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\reportWebVitals.js":"3","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\dashboard\\Dashboard.js":"4","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\header\\Header.js":"5","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\messagearea\\MessageLayout.js":"6","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\messagearea\\MessageHeader.js":"7","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\messagearea\\MessageArea.js":"8","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\customtheme\\MaterialTheme.js":"9","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\customcomponents\\AvartarStatus.js":"10","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\providers\\UserProvider.js":"11","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\api\\agent.js":"12","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\LoginPage.js":"13","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\ApplicationViews.js":"14","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\RegisterPage.js":"15","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\providers\\ChatProvider.js":"16","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\chatsidebar\\ChatSideBar.js":"17"},{"size":862,"mtime":1611200659795,"results":"18","hashOfConfig":"19"},{"size":456,"mtime":1611541601041,"results":"20","hashOfConfig":"19"},{"size":366,"mtime":1610598699027,"results":"21","hashOfConfig":"19"},{"size":2925,"mtime":1611733253612,"results":"22","hashOfConfig":"19"},{"size":1810,"mtime":1611709323279,"results":"23","hashOfConfig":"19"},{"size":1770,"mtime":1611703889346,"results":"24","hashOfConfig":"19"},{"size":3688,"mtime":1611709276280,"results":"25","hashOfConfig":"19"},{"size":2471,"mtime":1611709381017,"results":"26","hashOfConfig":"19"},{"size":1212,"mtime":1611115818707,"results":"27","hashOfConfig":"19"},{"size":1578,"mtime":1611732433950,"results":"28","hashOfConfig":"19"},{"size":2954,"mtime":1611710408965,"results":"29","hashOfConfig":"19"},{"size":1054,"mtime":1611729122208,"results":"30","hashOfConfig":"19"},{"size":5423,"mtime":1611546147999,"results":"31","hashOfConfig":"19"},{"size":1196,"mtime":1611543844854,"results":"32","hashOfConfig":"19"},{"size":8448,"mtime":1611546163378,"results":"33","hashOfConfig":"19"},{"size":2514,"mtime":1611733330938,"results":"34","hashOfConfig":"19"},{"size":3152,"mtime":1611732434587,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"753db5",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"38"},"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\index.js",[],["74","75"],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\App.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\dashboard\\Dashboard.js",["76","77"],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\header\\Header.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\messagearea\\MessageLayout.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\messagearea\\MessageHeader.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\messagearea\\MessageArea.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\customtheme\\MaterialTheme.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\customcomponents\\AvartarStatus.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\providers\\UserProvider.js",["78"],"import React, { useState, useEffect, createContext } from \"react\";\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport { history } from \"../index\"\r\n\r\n\r\nexport const UserContext = createContext();\r\n\r\nexport function UserProvider(props) {\r\n    const apiUrl = \"/api/user\";\r\n\r\n    const user = localStorage.getItem(\"user\");\r\n    const userToken = localStorage.getItem(\"token\");\r\n    const [isRegister, setIsRegister] = useState(false);\r\n    const [isLoggedIn, setIsLoggedIn] = useState(user != null);\r\n    const [isFirebaseReady, setIsFirebaseReady] = useState(false);\r\n    const [token, setToken] = useState(userToken ? userToken : \"\");\r\n\r\n    useEffect(() => {\r\n        firebase.auth().onAuthStateChanged((u) => {\r\n            setIsFirebaseReady(true);\r\n        });\r\n    }, []);\r\n\r\n    const login = (email, pw) => {\r\n        return firebase.auth().signInWithEmailAndPassword(email, pw)\r\n        .then((signInResponse) => getUser(signInResponse.user.uid))\r\n        .then((user) => {\r\n            console.log(user.id)\r\n            localStorage.setItem(\"user\", JSON.stringify(user));\r\n            setIsLoggedIn(true);\r\n        });\r\n    };\r\n    \r\n    const logout = () => {\r\n        return firebase.auth().signOut()\r\n        .then(() => {\r\n            localStorage.clear()\r\n            setIsLoggedIn(false);\r\n            history.push(\"/\")\r\n            window.onresize = null;\r\n        });\r\n    };\r\n\r\n\r\n    const register = (user, password) => {\r\n        return firebase.auth().createUserWithEmailAndPassword(user.email, password)\r\n            .then((createResponse) => saveUser({ ...user, firebaseUserId: createResponse.user.uid }))\r\n            .then((savedUser) => {\r\n                localStorage.setItem(\"user\", JSON.stringify(savedUser));\r\n                setIsLoggedIn(true);\r\n            });\r\n    };\r\n\r\n    const getToken = () => firebase.auth().currentUser.getIdToken()\r\n        .then(res => {\r\n            localStorage.setItem(\"token\", res)\r\n            setToken(res)\r\n        })\r\n\r\n    const getUser = (firebaseUserId) => {\r\n        return getToken().then((token) =>\r\n            fetch(`${apiUrl}/${firebaseUserId}`, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`\r\n                }\r\n            }).then(resp => resp.json()));\r\n    };\r\n\r\n\r\n    const saveUser = (user) => {\r\n        return getToken().then((token) =>\r\n            fetch(apiUrl, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(user)\r\n            }).then(resp => resp.json()));\r\n    };\r\n\r\n    return (\r\n        <UserContext.Provider value={{ isLoggedIn, isFirebaseReady, token, setIsLoggedIn, login, logout, register, getToken, setIsRegister }}>\r\n        {props.children}\r\n        </UserContext.Provider>\r\n    );\r\n}","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\api\\agent.js",["79"],"import axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'http://localhost:5000/api';\r\n\r\nconst responseBody = (response) => response.data;\r\n\r\nconst requests = {\r\n    get: (url) => axios.get(url).then(responseBody),\r\n    post: (url, body) => axios.get(url, body).then(responseBody),\r\n    put: (url, body) => axios.get(url, body).then(responseBody),\r\n    del: (url) => axios.get(url).then(responseBody),\r\n    getAuth: (url, firebaseUserId, token) => axios.get(url, firebaseUserId, token)\r\n    .then(responseBody)\r\n};\r\n\r\nconst Messages = {\r\n    list: (userId) => requests.get(`/messages/${userId}`)\r\n}\r\n\r\nconst User = {\r\n    user: (firebaseUserId, token) => requests.get(`/user/${firebaseUserId}`, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    })\r\n}\r\n\r\nconst UserChat = {\r\n    userChat: (token) => requests.get('/chat/', {\r\n         headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n    })\r\n}\r\nexport default {\r\n    Messages,\r\n    User,\r\n    UserChat\r\n}","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\LoginPage.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\ApplicationViews.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\RegisterPage.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\providers\\ChatProvider.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\chatsidebar\\ChatSideBar.js",["80","81","82"],"import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { Button, Container, ThemeProvider } from '@material-ui/core';\r\nimport { headerTheme } from '../../customtheme/MaterialTheme';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport agent from '../../api/agent';\r\nimport AvatarStatus from '../customcomponents/AvartarStatus';\r\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    maxWidth: 360,\r\n    backgroundColor: '#192734',\r\n    color: 'white',\r\n    border: '1px solid white',\r\n\r\n    overflow: 'scroll',\r\n\r\n  },\r\n}));\r\n\r\nconst ChatSideBar = () => {\r\n    const classes = useStyles();\r\n    const [chat, setChat] = useState([]);\r\n\r\n    useEffect(() => {\r\n            let token = localStorage.getItem(\"token\")\r\n            fetch('http://localhost:5000/api/chat/', {\r\n                method: \"GET\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                    \"Content-Type\": \"application/json\"\r\n                }\r\n            }).then(res => res.json())\r\n            .then(res => setChat(res))\r\n   \r\n        }, [])\r\n    \r\n\r\n    return (\r\n        <div className={classes.root}>\r\n        <ThemeProvider theme={headerTheme}>\r\n          <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n            <Container>\r\n                <h4>Channels</h4>\r\n                <Button variant=\"outlined\" color=\"secondary\">\r\n                Add Channel\r\n                </Button>\r\n            </Container>\r\n            <Container>\r\n                {  chat.map((c) => {\r\n                        if(c.type === 'Channel'){\r\n                        return  <ListItem button key={c.id}>\r\n                                    <PeopleAltIcon />\r\n                                    <ListItemText className=\"chatListText\" key={c.id} primary={c.name} />\r\n                                </ListItem>\r\n                        }\r\n                    })\r\n                }\r\n            </Container>\r\n          </List>\r\n          <Divider />\r\n          <List component=\"nav\" aria-label=\"secondary mailbox folders\">\r\n            <Container>\r\n                <h4>Direct Messages</h4>\r\n                <Button variant=\"outlined\" color=\"secondary\">\r\n                New Direct Message\r\n                </Button>\r\n            </Container>\r\n            <Container>\r\n                {  chat.map((c) => {\r\n                        if(c.type === 'Direct Message'){\r\n\r\n                        return  <ListItem button key={c.id}>\r\n                                    <AvatarStatus />\r\n                                    <ListItemText className=\"chatListText\" key={c.id} primary={c.name} />\r\n                                </ListItem>\r\n                        }\r\n                    })\r\n                }\r\n            </Container>\r\n          </List>\r\n        </ThemeProvider>\r\n        </div>\r\n      );\r\n}\r\nexport default ChatSideBar;",{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":14,"column":13,"nodeType":"89","messageId":"90","endLine":14,"endColumn":17},{"ruleId":"91","severity":1,"message":"92","line":28,"column":8,"nodeType":"93","endLine":28,"endColumn":10,"suggestions":"94"},{"ruleId":"87","severity":1,"message":"95","line":14,"column":12,"nodeType":"89","messageId":"90","endLine":14,"endColumn":22},{"ruleId":"96","severity":1,"message":"97","line":36,"column":1,"nodeType":"98","endLine":40,"endColumn":2},{"ruleId":"87","severity":1,"message":"99","line":9,"column":8,"nodeType":"89","messageId":"90","endLine":9,"endColumn":13},{"ruleId":"100","severity":1,"message":"101","line":56,"column":33,"nodeType":"102","messageId":"103","endLine":56,"endColumn":35},{"ruleId":"100","severity":1,"message":"101","line":76,"column":33,"nodeType":"102","messageId":"103","endLine":76,"endColumn":35},"no-native-reassign",["104"],"no-negated-in-lhs",["105"],"no-unused-vars","'chat' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'HubConnection'. Either include it or remove the dependency array.","ArrayExpression",["106"],"'isRegister' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'agent' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation",{"desc":"107","fix":"108"},"Update the dependencies array to be: [HubConnection]",{"range":"109","text":"110"},[1006,1008],"[HubConnection]"]