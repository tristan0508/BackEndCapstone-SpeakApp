[{"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\index.js":"1","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\App.js":"2","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\reportWebVitals.js":"3","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\dashboard\\Dashboard.js":"4","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\header\\Header.js":"5","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\messagearea\\MessageLayout.js":"6","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\messagearea\\MessageHeader.js":"7","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\messagearea\\MessageArea.js":"8","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\customtheme\\MaterialTheme.js":"9","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\customcomponents\\AvartarStatus.js":"10","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\providers\\UserProvider.js":"11","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\api\\agent.js":"12","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\LoginPage.js":"13","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\ApplicationViews.js":"14","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\RegisterPage.js":"15","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\chatsidebar\\ChatSideBar.js":"16","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\providers\\ChatHubProvider.js":"17","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\providers\\ChatProvider.js":"18","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\chatsidebar\\ChatDirectMessage.js":"19","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\chatsidebar\\UserList.js":"20"},{"size":862,"mtime":1611200659795,"results":"21","hashOfConfig":"22"},{"size":585,"mtime":1611797852439,"results":"23","hashOfConfig":"22"},{"size":366,"mtime":1610598699027,"results":"24","hashOfConfig":"22"},{"size":2283,"mtime":1611813752216,"results":"25","hashOfConfig":"22"},{"size":2821,"mtime":1611815689097,"results":"26","hashOfConfig":"22"},{"size":1890,"mtime":1611795941999,"results":"27","hashOfConfig":"22"},{"size":3670,"mtime":1611794025691,"results":"28","hashOfConfig":"22"},{"size":2478,"mtime":1611793066347,"results":"29","hashOfConfig":"22"},{"size":1212,"mtime":1611115818707,"results":"30","hashOfConfig":"22"},{"size":1577,"mtime":1611809909694,"results":"31","hashOfConfig":"22"},{"size":3096,"mtime":1611814721795,"results":"32","hashOfConfig":"22"},{"size":1054,"mtime":1611729122208,"results":"33","hashOfConfig":"22"},{"size":5571,"mtime":1611812660355,"results":"34","hashOfConfig":"22"},{"size":1322,"mtime":1611797918068,"results":"35","hashOfConfig":"22"},{"size":8446,"mtime":1611794199164,"results":"36","hashOfConfig":"22"},{"size":2999,"mtime":1611813767125,"results":"37","hashOfConfig":"22"},{"size":2541,"mtime":1611793104521,"results":"38","hashOfConfig":"22"},{"size":1458,"mtime":1611815629131,"results":"39","hashOfConfig":"22"},{"size":2264,"mtime":1611810896666,"results":"40","hashOfConfig":"22"},{"size":1309,"mtime":1611811477103,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"753db5",{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"44"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"44"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"70"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"44"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"44"},"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\index.js",[],["90","91"],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\App.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\dashboard\\Dashboard.js",["92","93"],"import React, { useEffect, useState, useContext } from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport MessageArea from '../messagearea/MessageArea';\r\nimport MessageHeader from '../messagearea/MessageHeader';\r\nimport MessageLayout from '../messagearea/MessageLayout';\r\nimport { ChatHubContext } from '../../providers/ChatHubProvider';\r\nimport ChatSideBar from '../chatsidebar/ChatSideBar';\r\nimport { ChatDirectMessage } from '../chatsidebar/ChatDirectMessage';\r\nimport { ChatContext } from '../../providers/ChatProvider';\r\n\r\n\r\n\r\nconst Dashboard = () => {\r\n    const [openMenu, setOpenMenu] = useState(false)\r\n    const { AddChannel, HubConnection } = useContext(ChatHubContext);\r\n    const { GetUserChat } = useContext(ChatContext)\r\n\r\n   \r\n    const scrollToEnd = () => {\r\n        let chatElement = document.getElementById('chat');\r\n        if (!chatElement) {\r\n            return 0;\r\n        }\r\n        chatElement.scrollTop = chatElement.scrollHeight;\r\n    }\r\n\r\n    useEffect(() => {\r\n        scrollToEnd()\r\n        HubConnection()\r\n        GetUserChat()\r\n    }, [])\r\n\r\n    return (\r\n        <Grid container >\r\n            <Grid container item xs={1} >\r\n                \r\n            </Grid>\r\n            <Grid container item xs={3} justify=\"flex-end\">\r\n                <ChatSideBar />\r\n            </Grid>\r\n\r\n            <Grid id=\"chat-container\" className=\"chat-grid-item\" container item xs={openMenu ? 6 : 8}>\r\n                <MessageHeader openMenu={openMenu} setOpenMenu={setOpenMenu} />\r\n\r\n                <Grid id=\"chat-grid-container\" container item className=\"chat-grid-container\" alignItems=\"flex-start\" >\r\n                    <Grid id=\"chat\" className=\"messages\" container item xs={8}>\r\n                            <ChatDirectMessage />\r\n                          <MessageLayout />\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid container item className=\"messageContainer\">\r\n                    <Grid item className=\"message-area-item\">\r\n                        <MessageArea />\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            \r\n            <Grid id=\"side-container\" container item className=\"maybe\" xs={2}>\r\n\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Dashboard;","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\header\\Header.js",["94"],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\messagearea\\MessageLayout.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\messagearea\\MessageHeader.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\messagearea\\MessageArea.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\customtheme\\MaterialTheme.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\customcomponents\\AvartarStatus.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\providers\\UserProvider.js",["95"],"import React, { useState, useEffect, createContext } from \"react\";\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport { history } from \"../index\"\r\n\r\n\r\nexport const UserContext = createContext();\r\n\r\nexport function UserProvider(props) {\r\n    const apiUrl = \"/api/user\";\r\n    const user = localStorage.getItem(\"user\");\r\n    const userToken = localStorage.getItem(\"token\");\r\n    const userId = localStorage.getItem(\"userId\");\r\n    const [isRegister, setIsRegister] = useState(false);\r\n    const [isLoggedIn, setIsLoggedIn] = useState(user != null);\r\n    const [isFirebaseReady, setIsFirebaseReady] = useState(false);\r\n    const [token, setToken] = useState(userToken ? userToken : \"\");\r\n\r\n    useEffect(() => {\r\n        firebase.auth().onAuthStateChanged((u) => {\r\n            setIsFirebaseReady(true);\r\n        });\r\n    }, []);\r\n\r\n    const login = (email, pw) => {\r\n        return firebase.auth().signInWithEmailAndPassword(email, pw)\r\n        .then((signInResponse) => getUser(signInResponse.user.uid))\r\n        .then((user) => {\r\n            localStorage.setItem(\"user\", JSON.stringify(user));\r\n            localStorage.setItem(\"userImage\", user.image);\r\n            localStorage.setItem(\"userId\", user.id);\r\n            setIsLoggedIn(true);\r\n        })\r\n    };\r\n    \r\n    const logout = () => {\r\n        return firebase.auth().signOut()\r\n        .then(() => {\r\n            localStorage.clear()\r\n            setIsLoggedIn(false);\r\n            history.push(\"/\")\r\n            window.onresize = null;\r\n        });\r\n    };\r\n\r\n\r\n    const register = (user, password) => {\r\n        return firebase.auth().createUserWithEmailAndPassword(user.email, password)\r\n            .then((createResponse) => saveUser({ ...user, firebaseUserId: createResponse.user.uid }))\r\n            .then((savedUser) => {\r\n                localStorage.setItem(\"user\", JSON.stringify(savedUser));\r\n                setIsLoggedIn(true);\r\n            });\r\n    };\r\n\r\n    const getToken = () => firebase.auth().currentUser.getIdToken()\r\n        .then(res => {\r\n            localStorage.setItem(\"token\", res)\r\n            setToken(res)\r\n        })\r\n\r\n    const getUser = (firebaseUserId) => {\r\n        return getToken().then((token) =>\r\n            fetch(`${apiUrl}/${firebaseUserId}`, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`\r\n                }\r\n            }).then(resp => resp.json())\r\n        )};\r\n\r\n\r\n    const saveUser = (user) => {\r\n        return getToken().then((token) =>\r\n            fetch(apiUrl, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(user)\r\n            }).then(resp => resp.json()));\r\n    };\r\n\r\n    return (\r\n        <UserContext.Provider value={{ isLoggedIn, isFirebaseReady, token, setIsLoggedIn, login, logout, register, getToken, setIsRegister, userId }}>\r\n        {props.children}\r\n        </UserContext.Provider>\r\n    );\r\n}\r\n","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\api\\agent.js",["96"],"import axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'http://localhost:5000/api';\r\n\r\nconst responseBody = (response) => response.data;\r\n\r\nconst requests = {\r\n    get: (url) => axios.get(url).then(responseBody),\r\n    post: (url, body) => axios.get(url, body).then(responseBody),\r\n    put: (url, body) => axios.get(url, body).then(responseBody),\r\n    del: (url) => axios.get(url).then(responseBody),\r\n    getAuth: (url, firebaseUserId, token) => axios.get(url, firebaseUserId, token)\r\n    .then(responseBody)\r\n};\r\n\r\nconst Messages = {\r\n    list: (userId) => requests.get(`/messages/${userId}`)\r\n}\r\n\r\nconst User = {\r\n    user: (firebaseUserId, token) => requests.get(`/user/${firebaseUserId}`, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    })\r\n}\r\n\r\nconst UserChat = {\r\n    userChat: (token) => requests.get('/chat/', {\r\n         headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n    })\r\n}\r\nexport default {\r\n    Messages,\r\n    User,\r\n    UserChat\r\n}",["97","98"],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\LoginPage.js",["99"],"import React, { useContext, useEffect, useState} from 'react';\r\nimport { UserContext } from '../providers/UserProvider';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles, ThemeProvider } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport { loginTheme } from '../customtheme/MaterialTheme'\r\nimport { history } from '../index'\r\nimport { ChatContext } from '../providers/ChatProvider';\r\n\r\nconst Copyright = () => {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"primary\" align=\"center\">\r\n      {'Copyright © '}\r\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n        Your Website\r\n      </Link>{' '}\r\n      {new Date().getFullYear()}\r\n      {'.'}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    color: 'white'\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%',\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  inputLabel: {\r\n      color: 'white',\r\n  },\r\n  notchedOutline: {\r\n    borderWidth: \"1px\",\r\n    borderColor: \"white !important\"\r\n  }\r\n}));\r\n\r\nconst LoginPage = () => {\r\n  const classes = useStyles();\r\n  const [email, setEmail] = useState(\"\")\r\n  const [password, setPassword] = useState(\"\")\r\n  const { login, setIsRegister } = useContext(UserContext);\r\n  const { GetUserChat } = useContext(ChatContext)\r\n\r\n  const handleLogin = () => {\r\n    login(email, password)\r\n      .then(() => history.push(\"/dashboard\"))\r\n      .then(() => GetUserChat)\r\n      .catch(() => alert(\"Invalid email or password\"))\r\n  }\r\n\r\n  const handleRegisterPush = () => {\r\n    setIsRegister(true)\r\n    history.push(\"/register\")\r\n  }\r\n\r\n  return (\r\n    <ThemeProvider theme={loginTheme}>\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n        <Typography component=\"h1\" variant=\"h2\">\r\n            Speak - App\r\n            </Typography>\r\n            <Avatar className={classes.avatar}>\r\n            <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n            Sign in\r\n            </Typography>\r\n            <form className={classes.form} noValidate>\r\n            <TextField\r\n                InputLabelProps={{\r\n                    classes: {\r\n                        root: classes.inputLabel\r\n                    },\r\n                }}\r\n                InputProps={{\r\n                    classes: {\r\n                    notchedOutline: classes.notchedOutline\r\n                    }\r\n                }}\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                label=\"Email Address\"\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n                autoFocus\r\n                value={email}\r\n                onChange={(e) => setEmail(e.currentTarget.value)}\r\n            />\r\n            <TextField\r\n                InputLabelProps={{\r\n                    classes: {\r\n                        root: classes.inputLabel\r\n                    },\r\n                }}\r\n                InputProps={{\r\n                    classes: {\r\n                    notchedOutline: classes.notchedOutline\r\n                    }\r\n                }}\r\n                color=\"secondary\"\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.currentTarget.value)}\r\n            />\r\n            <FormControlLabel\r\n                control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n                label=\"Remember me\"\r\n            />\r\n            <Button\r\n                onClick={handleLogin}\r\n                fullWidth\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.submit}\r\n            >\r\n                Sign In\r\n            </Button>\r\n            <Grid container>\r\n                <Grid item xs>\r\n                <Link href=\"#\" variant=\"body2\">\r\n                    Forgot password?\r\n                </Link>\r\n                </Grid>\r\n                <Grid item>\r\n                <Link style={{ cursor: 'pointer'}} variant=\"body2\" onClick={handleRegisterPush}>\r\n                    {\"Don't have an account? Sign Up\"}\r\n                </Link>\r\n                </Grid>\r\n            </Grid>\r\n            </form>\r\n        </div>\r\n        <Box mt={8}>\r\n            <Copyright />\r\n        </Box>\r\n        </Container>\r\n    </ThemeProvider>\r\n  );\r\n}\r\nexport default LoginPage;","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\ApplicationViews.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\RegisterPage.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\chatsidebar\\ChatSideBar.js",["100","101","102","103"],"import React, { useContext, useEffect } from 'react';\r\nimport { ChatContext } from '../../providers/ChatProvider';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { Button, Container, ThemeProvider } from '@material-ui/core';\r\nimport { headerTheme } from '../../customtheme/MaterialTheme';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport AvatarStatus from '../customcomponents/AvartarStatus';\r\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\r\n\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    width: '100%',\r\n    height: '100%',\r\n    maxWidth: 360,\r\n    backgroundColor: '#192734',\r\n    color: 'white',\r\n    border: '1px solid white',\r\n    overflow: 'scroll',\r\n  },\r\n}));\r\n\r\nconst ChatSideBar = () => {\r\n    const classes = useStyles();\r\n    const { GetUserChat, chat, openModal, setOpenModal } = useContext(ChatContext)\r\n\r\n    const handleModal = () => {\r\n      if(openModal === false){\r\n        setOpenModal(true)\r\n      } else {\r\n        setOpenModal(false)\r\n      }\r\n    }\r\n\r\n   \r\n\r\n    return (\r\n        <div className={classes.root}>\r\n        <ThemeProvider theme={headerTheme}>\r\n          <List component=\"nav\" aria-label=\"main mailbox folders\">\r\n            <Container>\r\n                <h4>Channels</h4>\r\n                <Button variant=\"outlined\" color=\"secondary\">\r\n                Add Channel\r\n                </Button>\r\n            </Container>\r\n            <Container>\r\n                {  chat.map((c) => {\r\n                        if(c.type === 'Channel'){\r\n                        return  <ListItem button key={c.id}>\r\n                                    <PeopleAltIcon />\r\n                                    <ListItemText className=\"chatListText\" key={c.id} primary={c.name} />\r\n                                </ListItem>\r\n                        }\r\n                    })\r\n                }\r\n            </Container>\r\n          </List>\r\n          <Divider />\r\n          <List component=\"nav\" aria-label=\"secondary mailbox folders\">\r\n            <Container>\r\n                <h4>Direct Messages</h4>\r\n               \r\n                <Button variant=\"outlined\" color=\"secondary\" onClick={handleModal}>\r\n                New Direct Message\r\n                </Button>\r\n            </Container>\r\n            <Container>\r\n                {  chat.map((c) => {\r\n                        if(c.type === 'Direct Message'){\r\n\r\n                        return  <ListItem button key={c.id}>\r\n                                    <AvatarStatus />\r\n                                    <ListItemText className=\"chatListText\" key={c.id} primary={c.name} />\r\n                                </ListItem>\r\n                        }\r\n                    })\r\n                }\r\n            </Container>\r\n          </List>\r\n        </ThemeProvider>\r\n        </div>\r\n      );\r\n}\r\nexport default ChatSideBar;","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\providers\\ChatHubProvider.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\providers\\ChatProvider.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\chatsidebar\\ChatDirectMessage.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\chatsidebar\\UserList.js",["104"],"import React, { useEffect, useContext } from 'react';\r\nimport { ChatContext } from '../../providers/ChatProvider';\r\nimport { Container, ListItem } from '@material-ui/core';\r\nimport AvatarStatus from '../customcomponents/AvartarStatus';\r\n\r\n\r\n\r\nexport const UserList = () => {\r\n    const { GetAllUsers, allUsers, userOnline, setUserOnline } = useContext(ChatContext)\r\n\r\n    useEffect(() => {\r\n        GetAllUsers()\r\n    }, [])\r\n\r\n    const handleOnline = (e) => {\r\n        if (userOnline === false) {\r\n            setUserOnline(true)\r\n        } else {\r\n            setUserOnline(false)\r\n        }\r\n        console.log(e.currentTarget.id)\r\n    }\r\n\r\n    return (\r\n\r\n        <ListItem className=\"userListContainer\" style={{ marginTop: '5px',borderRadius: '5px'}}>\r\n           { allUsers.map(u => {\r\n                return <div key={u.id} className=\"userList\">\r\n                        <AvatarStatus src={u.image} online={userOnline} />\r\n                            <Container style={{ marginTop: '7px', paddingLeft: '10px'}} >\r\n                                <button id={u.firebaseUserId} onClick={handleOnline} className=\"userListBtn\">{u.firstName} {u.lastName} # {u.displayName}</button>\r\n                            </Container>\r\n                        </div>\r\n\r\n            })}\r\n        </ListItem>\r\n    )\r\n}",{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","severity":1,"message":"110","line":15,"column":13,"nodeType":"111","messageId":"112","endLine":15,"endColumn":23},{"ruleId":"113","severity":1,"message":"114","line":31,"column":8,"nodeType":"115","endLine":31,"endColumn":10,"suggestions":"116"},{"ruleId":"109","severity":1,"message":"117","line":9,"column":10,"nodeType":"111","messageId":"112","endLine":9,"endColumn":21},{"ruleId":"109","severity":1,"message":"118","line":14,"column":12,"nodeType":"111","messageId":"112","endLine":14,"endColumn":22},{"ruleId":"119","severity":1,"message":"120","line":36,"column":1,"nodeType":"121","endLine":40,"endColumn":2},{"ruleId":"105","replacedBy":"122"},{"ruleId":"107","replacedBy":"123"},{"ruleId":"109","severity":1,"message":"124","line":1,"column":29,"nodeType":"111","messageId":"112","endLine":1,"endColumn":38},{"ruleId":"109","severity":1,"message":"124","line":1,"column":29,"nodeType":"111","messageId":"112","endLine":1,"endColumn":38},{"ruleId":"109","severity":1,"message":"125","line":28,"column":13,"nodeType":"111","messageId":"112","endLine":28,"endColumn":24},{"ruleId":"126","severity":1,"message":"127","line":51,"column":33,"nodeType":"128","messageId":"129","endLine":51,"endColumn":35},{"ruleId":"126","severity":1,"message":"127","line":72,"column":33,"nodeType":"128","messageId":"129","endLine":72,"endColumn":35},{"ruleId":"113","severity":1,"message":"130","line":13,"column":8,"nodeType":"115","endLine":13,"endColumn":10,"suggestions":"131"},"no-native-reassign",["132"],"no-negated-in-lhs",["133"],"no-unused-vars","'AddChannel' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'GetUserChat' and 'HubConnection'. Either include them or remove the dependency array.","ArrayExpression",["134"],"'ChatContext' is defined but never used.","'isRegister' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["132"],["133"],"'useEffect' is defined but never used.","'GetUserChat' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has a missing dependency: 'GetAllUsers'. Either include it or remove the dependency array.",["135"],"no-global-assign","no-unsafe-negation",{"desc":"136","fix":"137"},{"desc":"138","fix":"139"},"Update the dependencies array to be: [GetUserChat, HubConnection]",{"range":"140","text":"141"},"Update the dependencies array to be: [GetAllUsers]",{"range":"142","text":"143"},[1077,1079],"[GetUserChat, HubConnection]",[421,423],"[GetAllUsers]"]