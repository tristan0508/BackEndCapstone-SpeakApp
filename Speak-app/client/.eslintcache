[{"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\index.js":"1","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\App.js":"2","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\reportWebVitals.js":"3","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\dashboard\\Dashboard.js":"4","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\header\\Header.js":"5","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\messagearea\\MessageLayout.js":"6","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\messagearea\\MessageHeader.js":"7","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\messagearea\\MessageArea.js":"8","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\customtheme\\MaterialTheme.js":"9","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\providers\\UserProvider.js":"10","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\api\\agent.js":"11","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\LoginPage.js":"12","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\RegisterPage.js":"13","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\chatsidebar\\ChatSideBar.js":"14","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\providers\\ChatHubProvider.js":"15","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\providers\\ChatProvider.js":"16","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\chatsidebar\\ChatDirectMessage.js":"17","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\chatsidebar\\UserList.js":"18","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\customcomponents\\AvatarStatus.js":"19","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\customcomponents\\GroupMessageByDate.js":"20","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\providers\\ContextProvider.js":"21","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\utilis\\utils.js":"22"},{"size":1236,"mtime":1612504367067,"results":"23","hashOfConfig":"24"},{"size":1253,"mtime":1612504333846,"results":"25","hashOfConfig":"24"},{"size":366,"mtime":1610598699027,"results":"26","hashOfConfig":"24"},{"size":2466,"mtime":1612497964695,"results":"27","hashOfConfig":"24"},{"size":2762,"mtime":1612498019660,"results":"28","hashOfConfig":"24"},{"size":2532,"mtime":1612498066756,"results":"29","hashOfConfig":"24"},{"size":3469,"mtime":1612499599578,"results":"30","hashOfConfig":"24"},{"size":2706,"mtime":1612498043416,"results":"31","hashOfConfig":"24"},{"size":1212,"mtime":1611115818707,"results":"32","hashOfConfig":"24"},{"size":3271,"mtime":1612499245276,"results":"33","hashOfConfig":"24"},{"size":1054,"mtime":1611729122208,"results":"34","hashOfConfig":"24"},{"size":5431,"mtime":1612590463546,"results":"35","hashOfConfig":"24"},{"size":8409,"mtime":1612497710468,"results":"36","hashOfConfig":"24"},{"size":3935,"mtime":1612497990733,"results":"37","hashOfConfig":"24"},{"size":2635,"mtime":1612498106824,"results":"38","hashOfConfig":"24"},{"size":2227,"mtime":1612498120583,"results":"39","hashOfConfig":"24"},{"size":2267,"mtime":1612497892880,"results":"40","hashOfConfig":"24"},{"size":1936,"mtime":1612548104108,"results":"41","hashOfConfig":"24"},{"size":1609,"mtime":1612416730190,"results":"42","hashOfConfig":"24"},{"size":517,"mtime":1612468609579,"results":"43","hashOfConfig":"24"},{"size":182,"mtime":1612498201228,"results":"44","hashOfConfig":"24"},{"size":141,"mtime":1612498205096,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"753db5",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"48"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\index.js",[],["98","99"],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\App.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\dashboard\\Dashboard.js",["100"],"import React, { useEffect, useState, useContext, useRef } from 'react';\r\nimport { Grid } from '@material-ui/core';\r\nimport MessageArea from '../messagearea/MessageArea';\r\nimport MessageHeader from '../messagearea/MessageHeader';\r\nimport MessageLayout from '../messagearea/MessageLayout';\r\nimport ChatSideBar from '../chatsidebar/ChatSideBar';\r\nimport { ChatDirectMessage } from '../chatsidebar/ChatDirectMessage';\r\nimport { ChatContext, ChatHubContext } from '../../providers/ContextProvider';\r\n\r\nconst Dashboard = () => {\r\n    const [openMenu, setOpenMenu] = useState(false)\r\n    const { HubConnection } = useContext(ChatHubContext);\r\n    const { GetUserChat } = useContext(ChatContext)\r\n\r\n   \r\n    const scrollToEnd = () => {\r\n        let chatElement = document.getElementById('chat');\r\n        if (!chatElement) {\r\n            return 0;\r\n        }\r\n        chatElement.scrollTop = chatElement.scrollHeight;\r\n    }\r\n\r\n    useEffect(() => {\r\n        scrollToEnd()\r\n        HubConnection()\r\n        GetUserChat()\r\n    }, [])\r\n\r\n    const chatContainer = useRef();\r\n    const sideContainer = useRef();\r\n\r\n    return (\r\n        <Grid container >\r\n            <Grid container item xs={1} >\r\n                \r\n            </Grid>\r\n            <Grid container item xs={3} justify=\"flex-end\">\r\n                <ChatSideBar />\r\n            </Grid>\r\n\r\n            <Grid id=\"chat-container\" className=\"chat-grid-item\" container item xs={openMenu ? 6 : 8}>\r\n                <MessageHeader \r\n                openMenu={openMenu}\r\n                setOpenMenu={setOpenMenu}\r\n                chatContainer={chatContainer}\r\n                sideContainer={sideContainer} />\r\n\r\n                <Grid id=\"chat-grid-container\" ref={chatContainer} container item className=\"chat-grid-container\" alignItems=\"flex-start\" >\r\n                    <Grid id=\"chat\" className=\"messages\" container item xs={8}>\r\n                        <ChatDirectMessage />\r\n                        <MessageLayout />\r\n                    </Grid>\r\n                </Grid>\r\n\r\n                <Grid container item className=\"messageContainer\">\r\n                    <Grid item className=\"message-area-item\">\r\n                        <MessageArea />\r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n            \r\n            <Grid id=\"side-container\" ref={sideContainer} container item className=\"maybe\" xs={2}>\r\n\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Dashboard;","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\header\\Header.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\messagearea\\MessageLayout.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\messagearea\\MessageHeader.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\messagearea\\MessageArea.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\customtheme\\MaterialTheme.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\providers\\UserProvider.js",["101"],"import React, { useState } from \"react\";\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport { history } from \"../index\"\r\nimport { UserContext } from './ContextProvider';\r\n\r\n\r\n\r\n\r\nexport function UserProvider(props) {\r\n    const apiUrl = \"/api/user\";\r\n    const user = localStorage.getItem(\"user\");\r\n    const userToken = localStorage.getItem(\"token\");\r\n    const userId = localStorage.getItem(\"userId\");\r\n    const displayName = localStorage.getItem(\"displayName\");\r\n    const userImage = localStorage.getItem(\"userImage\");\r\n    const firebaseId = localStorage.getItem(\"firebaseId\");\r\n    const [isRegister, setIsRegister] = useState(false);\r\n    const [isLoggedIn, setIsLoggedIn] = useState(user != null);\r\n    const [token, setToken] = useState(userToken ? userToken : \"\");\r\n\r\n    \r\n\r\n\r\n    const login = (email, pw) => {\r\n        return firebase.auth().signInWithEmailAndPassword(email, pw)\r\n        .then((signInResponse) => getUser(signInResponse.user.uid))\r\n        .then((user) => {\r\n            localStorage.setItem(\"user\", JSON.stringify(user));\r\n            localStorage.setItem(\"userImage\", user.image !== null ? user.image : \"\");\r\n            localStorage.setItem(\"userId\", user.id);\r\n            localStorage.setItem(\"displayName\", `${user.firstName} ${user.lastName}`);\r\n            localStorage.setItem(\"firebaseId\", user.firebaseUserId);\r\n            setIsLoggedIn(true);\r\n        })\r\n    };\r\n    \r\n    const logout = () => {\r\n        return firebase.auth().signOut()\r\n        .then(() => {\r\n            localStorage.clear()\r\n            setIsLoggedIn(false);\r\n            history.push(\"/\")\r\n            window.onresize = null;\r\n        });\r\n    };\r\n\r\n\r\n    const register = (user, password) => {\r\n        return firebase.auth().createUserWithEmailAndPassword(user.email, password)\r\n            .then((createResponse) => saveUser({ ...user, firebaseUserId: createResponse.user.uid }))\r\n            .then((savedUser) => {\r\n                localStorage.setItem(\"user\", JSON.stringify(savedUser));\r\n                setIsLoggedIn(true);\r\n            });\r\n    };\r\n\r\n    const getToken = () => firebase.auth().currentUser.getIdToken()\r\n        .then(res => {\r\n            localStorage.setItem(\"token\", res)\r\n            setToken(res)\r\n        })\r\n\r\n    const getUser = (firebaseUserId) => {\r\n        return getToken().then((token) =>\r\n            fetch(`${apiUrl}/${firebaseUserId}`, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`\r\n                }\r\n            }).then(resp => resp.json())\r\n        )};\r\n\r\n\r\n    const saveUser = (user) => {\r\n        return getToken().then((token) =>\r\n            fetch(apiUrl, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(user)\r\n            }).then(resp => resp.json()));\r\n    };\r\n\r\n    return (\r\n        <UserContext.Provider value={{ isLoggedIn, token, setIsLoggedIn, login, logout, register, getToken, setIsRegister, userId, displayName,\r\n        userImage, firebaseId }}>\r\n        {props.children}\r\n        </UserContext.Provider>\r\n\r\n    );\r\n}\r\n","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\api\\agent.js",["102"],"import axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'http://localhost:5000/api';\r\n\r\nconst responseBody = (response) => response.data;\r\n\r\nconst requests = {\r\n    get: (url) => axios.get(url).then(responseBody),\r\n    post: (url, body) => axios.get(url, body).then(responseBody),\r\n    put: (url, body) => axios.get(url, body).then(responseBody),\r\n    del: (url) => axios.get(url).then(responseBody),\r\n    getAuth: (url, firebaseUserId, token) => axios.get(url, firebaseUserId, token)\r\n    .then(responseBody)\r\n};\r\n\r\nconst Messages = {\r\n    list: (userId) => requests.get(`/messages/${userId}`)\r\n}\r\n\r\nconst User = {\r\n    user: (firebaseUserId, token) => requests.get(`/user/${firebaseUserId}`, {\r\n        headers: {\r\n            Authorization: `Bearer ${token}`\r\n        }\r\n    })\r\n}\r\n\r\nconst UserChat = {\r\n    userChat: (token) => requests.get('/chat/', {\r\n         headers: {\r\n            Authorization: `Bearer ${token}`,\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n    })\r\n}\r\nexport default {\r\n    Messages,\r\n    User,\r\n    UserChat\r\n}",["103","104"],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\LoginPage.js",["105"],"import React, { useContext, useState} from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Button from '@material-ui/core/Button';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles, ThemeProvider } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\nimport { loginTheme } from '../customtheme/MaterialTheme'\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n\r\n\r\n\r\nconst Copyright = () => {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"primary\" align=\"center\">\r\n      {'Copyright © '}\r\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n        Your Website\r\n      </Link>{' '}\r\n      {new Date().getFullYear()}\r\n      {'.'}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(8),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n    color: 'white'\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%',\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n  inputLabel: {\r\n      color: 'white',\r\n  },\r\n  notchedOutline: {\r\n    borderWidth: \"1px\",\r\n    borderColor: \"white !important\"\r\n  }\r\n}));\r\n\r\n\r\n\r\nexport const LoginPage = ({login}) => {\r\n  const classes = useStyles();\r\n  const [email, setEmail] = useState(\"\")\r\n  const [password, setPassword] = useState(\"\");\r\n  const history = useHistory()\r\n\r\n\r\n  const handleLogin = () => {\r\n      login(email, password)\r\n  }\r\n\r\n  const handleRegisterPush = () => {\r\n    history.push(\"/register\")\r\n  }\r\n\r\n  return (\r\n    <div>\r\n    <ThemeProvider theme={loginTheme}>\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n        <CssBaseline />\r\n        <div className={classes.paper}>\r\n        <Typography component=\"h1\" variant=\"h2\">\r\n            Speak - App\r\n            </Typography>\r\n            <Avatar className={classes.avatar}>\r\n            <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n            Sign in\r\n            </Typography>\r\n            <form id=\"loginForm\" className={classes.form} noValidate>\r\n            <TextField\r\n                InputLabelProps={{\r\n                    classes: {\r\n                        root: classes.inputLabel\r\n                    },\r\n                }}\r\n                InputProps={{\r\n                    classes: {\r\n                    notchedOutline: classes.notchedOutline\r\n                    }\r\n                }}\r\n                data-testid=\"email\"\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                label=\"Email Address\"\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n                type=\"text\"\r\n                autoFocus\r\n                value={email}\r\n                onChange={(e) => setEmail(e.currentTarget.value)}\r\n            />\r\n            <TextField\r\n                InputLabelProps={{\r\n                    classes: {\r\n                        root: classes.inputLabel\r\n                    },\r\n                }}\r\n                InputProps={{\r\n                    classes: {\r\n                    notchedOutline: classes.notchedOutline\r\n                    }\r\n                }}\r\n                data-testid=\"password\"\r\n                color=\"secondary\"\r\n                variant=\"outlined\"\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.currentTarget.value)}\r\n            />\r\n            <FormControlLabel\r\n                control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n                label=\"Remember me\"\r\n            />\r\n            <Button\r\n                data-testid=\"signIn\"\r\n                onClick={handleLogin}\r\n                id='signIn'\r\n                fullWidth\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                className={classes.submit}\r\n            >\r\n                Sign In\r\n            </Button>\r\n            <Grid container>\r\n                <Grid item xs>\r\n                <Link href=\"#\" variant=\"body2\">\r\n                    Forgot password?\r\n                </Link>\r\n                </Grid>\r\n                <Grid item>\r\n                <Link style={{ cursor: 'pointer'}} variant=\"body2\" onClick={handleRegisterPush}>\r\n                    {\"Don't have an account? Sign Up\"}\r\n                </Link>\r\n                </Grid>\r\n            </Grid>\r\n            </form>\r\n        </div>\r\n        <Box mt={8}>\r\n            <Copyright />\r\n        </Box>\r\n        </Container>\r\n    </ThemeProvider>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\RegisterPage.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\chatsidebar\\ChatSideBar.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\providers\\ChatHubProvider.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\providers\\ChatProvider.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\chatsidebar\\ChatDirectMessage.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\chatsidebar\\UserList.js",["106"],"import React, { useEffect, useContext } from 'react';\r\nimport { Container, ListItem } from '@material-ui/core';\r\nimport AvatarStatus from '../customcomponents/AvatarStatus';\r\nimport { UserContext, ChatContext } from '../../providers/ContextProvider';\r\n\r\n\r\n\r\n\r\nexport const UserList = () => {\r\n    const { GetAllUsers, allUsers, userOnline, AddChat, setOpenModal } = useContext(ChatContext)\r\n    const { displayName, userImage } = useContext(UserContext);\r\n\r\n    useEffect(() => {\r\n        GetAllUsers()\r\n    }, [])\r\n\r\n    const handleReceiver = (first, last, image) => {\r\n     \r\n\r\n        const Chat = {\r\n            name: displayName,\r\n            type: \"Direct Message\",\r\n            sender: displayName,\r\n            receiver: `${first} ${last}`,\r\n            senderImage: userImage,\r\n            receiverImage: image ? image : null\r\n        }\r\n\r\n        AddChat(Chat)\r\n        setOpenModal(false)\r\n    }\r\n\r\n    return (\r\n\r\n        <ListItem className=\"userListContainer\" style={{ marginTop: '5px',borderRadius: '5px'}}>\r\n           { allUsers.map(u => {\r\n                return <div key={u.id} className=\"userList\">\r\n                        <AvatarStatus src={u.image} online={userOnline} />\r\n                            <Container style={{ marginTop: '7px', paddingLeft: '10px'}} >\r\n                                <button \r\n                                 onClick={() => \r\n                                    handleReceiver(\r\n                                        u.firstName,\r\n                                        u.lastName,\r\n                                        u.image\r\n                                    )} \r\n                                 className=\"userListBtn\">\r\n                                    {u.firstName} {u.lastName} # {u.displayName}\r\n                                </button>\r\n                            </Container>\r\n                        </div>\r\n\r\n            })}\r\n        </ListItem>\r\n    )\r\n}","C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\customcomponents\\AvatarStatus.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\components\\customcomponents\\GroupMessageByDate.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\providers\\ContextProvider.js",[],"C:\\Users\\Tristan\\workspace\\speak-app\\Speak-app\\Speak-app\\client\\src\\utilis\\utils.js",[],["107","108"],{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","severity":1,"message":"114","line":28,"column":8,"nodeType":"115","endLine":28,"endColumn":10,"suggestions":"116"},{"ruleId":"117","severity":1,"message":"118","line":18,"column":12,"nodeType":"119","messageId":"120","endLine":18,"endColumn":22},{"ruleId":"121","severity":1,"message":"122","line":36,"column":1,"nodeType":"123","endLine":40,"endColumn":2},{"ruleId":"109","replacedBy":"124"},{"ruleId":"111","replacedBy":"125"},{"ruleId":"117","severity":1,"message":"126","line":1,"column":17,"nodeType":"119","messageId":"120","endLine":1,"endColumn":27},{"ruleId":"113","severity":1,"message":"127","line":15,"column":8,"nodeType":"115","endLine":15,"endColumn":10,"suggestions":"128"},{"ruleId":"109","replacedBy":"129"},{"ruleId":"111","replacedBy":"130"},"no-native-reassign",["131"],"no-negated-in-lhs",["132"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'GetUserChat' and 'HubConnection'. Either include them or remove the dependency array.","ArrayExpression",["133"],"no-unused-vars","'isRegister' is assigned a value but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration",["131"],["132"],"'useContext' is defined but never used.","React Hook useEffect has a missing dependency: 'GetAllUsers'. Either include it or remove the dependency array.",["134"],["131"],["132"],"no-global-assign","no-unsafe-negation",{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},"Update the dependencies array to be: [GetUserChat, HubConnection]",{"range":"139","text":"140"},"Update the dependencies array to be: [GetAllUsers]",{"range":"141","text":"142"},[1021,1023],"[GetUserChat, HubConnection]",[511,513],"[GetAllUsers]"]